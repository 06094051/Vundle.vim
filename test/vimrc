" vim -u test/vimrc
set nocompatible

filetype off
runtime macros/matchit.vim
set rtp+=~/.vim/vundle.git/

call vundle#rc('/tmp/vundle_bundles')


" vim-scripts name
Bundle 'molokai'

" github username with dashes
Bundle 'vim-scripts/ragtag.vim'

" original repo
Bundle 'altercation/vim-colors-solarized'
" with extension
Bundle 'nelstrom/vim-mac-classic-theme.git'

" full uri
Bundle 'git@github.com:gmarik/ingretu.git'
" short uri
Bundle 'gh:gmarik/snipmate.vim.git'
Bundle 'github:mattn/gist-vim.git'

" local uri stuff
Bundle '~/Dropbox/.gitrepos/utilz.vim.git'
" Bundle 'file://Dropbox/.gitrepos/utilz.vim.git'

" with options
Bundle 'rstacruz/sparkup.git', {'rtp': 'vim/'}

" Camel case
Bundle 'vim-scripts/RubySinatra'

" NOSYNC
" existing directory
Bundle! '~/.vim/vundle.git/test/'

" just create one
Bundle! 'a_plugin'

filetype plugin indent on      " Automatically detect file types.

set wildignore+=doc              " should not break helptags



augroup vimrc
  au WinEnter * call s:test()
augroup END

func! s:test()
  if 'ok' != g:vundle_test_plugin() != 'ok'
    throw 'ooops'
  endif

  call s:assert_bundles()

  call s:asser_a_bundle()
endf

func! s:assert(cond, msg)
  if !a:cond
    throw a:msg
  endif
endf

func! s:assert_bundles() abort
  for b in g:vundle#bundles
    call assert(b.nosync() || b.installed(), b.name.' not installed')
  endfor
endf

func! s:assert_a_bundle() abort
  let b = filter(copy(g:vundle#bundles), 'v:var.name = "a_bundle"')[0]
  let c = b.path() != expand(g:vundle#bundle_dir.'/'.'a_name')
  call s:assert(c, ' a_plugin isnt instaled')
endf

